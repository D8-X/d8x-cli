// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/D8-X/d8x-cli/internal/components (interfaces: ComponentsRunner)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	components "github.com/D8-X/d8x-cli/internal/components"
	gomock "go.uber.org/mock/gomock"
)

// MockComponentsRunner is a mock of ComponentsRunner interface.
type MockComponentsRunner struct {
	ctrl     *gomock.Controller
	recorder *MockComponentsRunnerMockRecorder
}

// MockComponentsRunnerMockRecorder is the mock recorder for MockComponentsRunner.
type MockComponentsRunnerMockRecorder struct {
	mock *MockComponentsRunner
}

// NewMockComponentsRunner creates a new mock instance.
func NewMockComponentsRunner(ctrl *gomock.Controller) *MockComponentsRunner {
	mock := &MockComponentsRunner{ctrl: ctrl}
	mock.recorder = &MockComponentsRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComponentsRunner) EXPECT() *MockComponentsRunnerMockRecorder {
	return m.recorder
}

// NewConfirmation mocks base method.
func (m *MockComponentsRunner) NewConfirmation(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewConfirmation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewConfirmation indicates an expected call of NewConfirmation.
func (mr *MockComponentsRunnerMockRecorder) NewConfirmation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewConfirmation", reflect.TypeOf((*MockComponentsRunner)(nil).NewConfirmation), arg0)
}

// NewInput mocks base method.
func (m *MockComponentsRunner) NewInput(arg0 ...components.TextInputOpt) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewInput", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewInput indicates an expected call of NewInput.
func (mr *MockComponentsRunnerMockRecorder) NewInput(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewInput", reflect.TypeOf((*MockComponentsRunner)(nil).NewInput), arg0...)
}

// NewList mocks base method.
func (m *MockComponentsRunner) NewList(arg0 []components.ListItem, arg1 string, arg2 ...components.ListOpt) (components.ListItem, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewList", varargs...)
	ret0, _ := ret[0].(components.ListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewList indicates an expected call of NewList.
func (mr *MockComponentsRunnerMockRecorder) NewList(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewList", reflect.TypeOf((*MockComponentsRunner)(nil).NewList), varargs...)
}

// NewPrompt mocks base method.
func (m *MockComponentsRunner) NewPrompt(arg0 string, arg1 bool) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewPrompt", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewPrompt indicates an expected call of NewPrompt.
func (mr *MockComponentsRunnerMockRecorder) NewPrompt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPrompt", reflect.TypeOf((*MockComponentsRunner)(nil).NewPrompt), arg0, arg1)
}

// NewSelection mocks base method.
func (m *MockComponentsRunner) NewSelection(arg0 []string, arg1 ...components.SelectionOpts) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewSelection", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSelection indicates an expected call of NewSelection.
func (mr *MockComponentsRunnerMockRecorder) NewSelection(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSelection", reflect.TypeOf((*MockComponentsRunner)(nil).NewSelection), varargs...)
}

// NewSpinner mocks base method.
func (m *MockComponentsRunner) NewSpinner() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSpinner")
	ret0, _ := ret[0].(error)
	return ret0
}

// NewSpinner indicates an expected call of NewSpinner.
func (mr *MockComponentsRunnerMockRecorder) NewSpinner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSpinner", reflect.TypeOf((*MockComponentsRunner)(nil).NewSpinner))
}

// NewTimer mocks base method.
func (m *MockComponentsRunner) NewTimer(arg0 time.Duration, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTimer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewTimer indicates an expected call of NewTimer.
func (mr *MockComponentsRunnerMockRecorder) NewTimer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTimer", reflect.TypeOf((*MockComponentsRunner)(nil).NewTimer), arg0, arg1)
}
