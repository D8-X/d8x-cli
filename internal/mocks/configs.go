// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/D8-X/d8x-cli/internal/configs (interfaces: D8XConfigReadWriter)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	configs "github.com/D8-X/d8x-cli/internal/configs"
	gomock "go.uber.org/mock/gomock"
)

// MockD8XConfigReadWriter is a mock of D8XConfigReadWriter interface.
type MockD8XConfigReadWriter struct {
	ctrl     *gomock.Controller
	recorder *MockD8XConfigReadWriterMockRecorder
}

// MockD8XConfigReadWriterMockRecorder is the mock recorder for MockD8XConfigReadWriter.
type MockD8XConfigReadWriterMockRecorder struct {
	mock *MockD8XConfigReadWriter
}

// NewMockD8XConfigReadWriter creates a new mock instance.
func NewMockD8XConfigReadWriter(ctrl *gomock.Controller) *MockD8XConfigReadWriter {
	mock := &MockD8XConfigReadWriter{ctrl: ctrl}
	mock.recorder = &MockD8XConfigReadWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockD8XConfigReadWriter) EXPECT() *MockD8XConfigReadWriterMockRecorder {
	return m.recorder
}

// GetPath mocks base method.
func (m *MockD8XConfigReadWriter) GetPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPath indicates an expected call of GetPath.
func (mr *MockD8XConfigReadWriterMockRecorder) GetPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPath", reflect.TypeOf((*MockD8XConfigReadWriter)(nil).GetPath))
}

// Read mocks base method.
func (m *MockD8XConfigReadWriter) Read() (*configs.D8XConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].(*configs.D8XConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockD8XConfigReadWriterMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockD8XConfigReadWriter)(nil).Read))
}

// Write mocks base method.
func (m *MockD8XConfigReadWriter) Write(arg0 *configs.D8XConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockD8XConfigReadWriterMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockD8XConfigReadWriter)(nil).Write), arg0)
}

// WriteTo mocks base method.
func (m *MockD8XConfigReadWriter) WriteTo(arg0 string, arg1 *configs.D8XConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteTo indicates an expected call of WriteTo.
func (mr *MockD8XConfigReadWriterMockRecorder) WriteTo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTo", reflect.TypeOf((*MockD8XConfigReadWriter)(nil).WriteTo), arg0, arg1)
}
