// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/D8-X/d8x-cli/internal/conn (interfaces: SSHConnection)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	conn "github.com/D8-X/d8x-cli/internal/conn"
	gomock "go.uber.org/mock/gomock"
)

// MockSSHConnection is a mock of SSHConnection interface.
type MockSSHConnection struct {
	ctrl     *gomock.Controller
	recorder *MockSSHConnectionMockRecorder
}

// MockSSHConnectionMockRecorder is the mock recorder for MockSSHConnection.
type MockSSHConnectionMockRecorder struct {
	mock *MockSSHConnection
}

// NewMockSSHConnection creates a new mock instance.
func NewMockSSHConnection(ctrl *gomock.Controller) *MockSSHConnection {
	mock := &MockSSHConnection{ctrl: ctrl}
	mock.recorder = &MockSSHConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSHConnection) EXPECT() *MockSSHConnectionMockRecorder {
	return m.recorder
}

// CopyFilesOverSftp mocks base method.
func (m *MockSSHConnection) CopyFilesOverSftp(arg0 ...conn.SftpCopySrcDest) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CopyFilesOverSftp", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyFilesOverSftp indicates an expected call of CopyFilesOverSftp.
func (mr *MockSSHConnectionMockRecorder) CopyFilesOverSftp(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFilesOverSftp", reflect.TypeOf((*MockSSHConnection)(nil).CopyFilesOverSftp), arg0...)
}

// ExecCommand mocks base method.
func (m *MockSSHConnection) ExecCommand(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecCommand", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecCommand indicates an expected call of ExecCommand.
func (mr *MockSSHConnectionMockRecorder) ExecCommand(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecCommand", reflect.TypeOf((*MockSSHConnection)(nil).ExecCommand), arg0)
}

// ExecCommandPiped mocks base method.
func (m *MockSSHConnection) ExecCommandPiped(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecCommandPiped", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecCommandPiped indicates an expected call of ExecCommandPiped.
func (mr *MockSSHConnectionMockRecorder) ExecCommandPiped(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecCommandPiped", reflect.TypeOf((*MockSSHConnection)(nil).ExecCommandPiped), arg0)
}
